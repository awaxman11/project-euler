# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


def fib1(n)
  if n <= 1
    1
  else
    fib1(n-1) + fib1(n-2)
  end
end

def fib2(n)
  @fib2    ||= []
  @fib2[n] ||= if n <= 2
                 1
               else
                 fib2(n-1) + fib2(n-2)
               end
end

# return the n-th term in the Fibonacci sequence
def fib(n)
  @fib    ||= {}
  return @fib[n] if @fib.has_key?(n)
  @fib[n] ||= if n <= 1
                1
              else
                fib(n-1) + fib(n-2)
              end
end


i = 1
sum = 0
while fib(i) < 4e6
  # puts fib(i) if fib(i).even?
  sum += fib(i) if fib(i).even?
  i += 1
end

puts sum